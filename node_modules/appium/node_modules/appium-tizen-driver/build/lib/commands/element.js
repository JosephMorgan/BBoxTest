"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _asyncbox = require("asyncbox");

let commands = {},
    extensions = {};
exports.commands = commands;

commands.getAttribute = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (attribute, elementId) {
    elementId = this.getAutomationId(elementId);
    let params = {
      attribute,
      elementId
    };
    return yield this.bootstrap.sendAction("element:getAttribute", params);
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.setAttribute = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (attribute, value, elementId) {
    elementId = this.getAutomationId(elementId);
    let params = {
      attribute,
      value,
      elementId
    };
    return yield this.bootstrap.sendAction("element:setAttribute", params);
  });

  return function (_x3, _x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

commands.getLocation = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    return yield this.bootstrap.sendAction("element:location", {
      elementId
    });
  });

  return function (_x6) {
    return _ref3.apply(this, arguments);
  };
}();

commands.getLocationInView = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.getLocation(elementId);
  });

  return function (_x7) {
    return _ref4.apply(this, arguments);
  };
}();

commands.getLocationValueByElementId = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (elementId) {
    return yield this.getLocation(elementId);
  });

  return function (_x8) {
    return _ref5.apply(this, arguments);
  };
}();

commands.getText = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    return yield this.bootstrap.sendAction("element:getText", {
      elementId
    });
  });

  return function (_x9) {
    return _ref6.apply(this, arguments);
  };
}();

commands.elementEnabled = function () {
  var _ref7 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    return yield this.bootstrap.sendAction("element:enabled", {
      elementId
    });
  });

  return function (_x10) {
    return _ref7.apply(this, arguments);
  };
}();

commands.elementDisplayed = function () {
  var _ref8 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    return yield this.bootstrap.sendAction("element:displayed", {
      elementId
    });
  });

  return function (_x11) {
    return _ref8.apply(this, arguments);
  };
}();

commands.elementSelected = function () {
  _logger.default.info('elementSelected not supported');

  return false;
};

commands.getSize = function () {
  var _ref9 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    return yield this.bootstrap.sendAction("element:size", {
      elementId
    });
  });

  return function (_x12) {
    return _ref9.apply(this, arguments);
  };
}();

commands.setValue = function () {
  var _ref10 = (0, _asyncToGenerator2.default)(function* (keys, elementId) {
    let text = keys.join();
    elementId = this.getAutomationId(elementId);
    let params = {
      elementId,
      text,
      replace: false
    };
    return yield this.bootstrap.sendAction("element:setText", params);
  });

  return function (_x13, _x14) {
    return _ref10.apply(this, arguments);
  };
}();

commands.setValueImmediate = function () {
  var _ref11 = (0, _asyncToGenerator2.default)(function* (keys, elementId) {
    let text = _lodash.default.isArray(keys) ? keys.join('') : keys;
    elementId = this.getAutomationId(elementId);
    let params = {
      elementId,
      text,
      replace: false
    };
    return yield this.bootstrap.sendAction("element:setText", params);
  });

  return function (_x15, _x16) {
    return _ref11.apply(this, arguments);
  };
}();

commands.clear = function () {
  var _ref12 = (0, _asyncToGenerator2.default)(function* (elementId) {
    elementId = this.getAutomationId(elementId);
    let params = {
      elementId,
      text: "",
      replace: true
    };
    return yield this.bootstrap.sendAction("element:setText", params);
  });

  return function (_x17) {
    return _ref12.apply(this, arguments);
  };
}();

commands.replaceValue = function () {
  var _ref13 = (0, _asyncToGenerator2.default)(function* (value, elementId) {
    elementId = this.getAutomationId(elementId);
    let params = {
      elementId,
      text: value,
      replace: true
    };
    return yield this.bootstrap.sendAction("element:setText", params);
  });

  return function (_x18, _x19) {
    return _ref13.apply(this, arguments);
  };
}();

commands.click = function () {
  var _ref14 = (0, _asyncToGenerator2.default)(function* (elementId, x = 0, y = 0) {
    if (x === this.sessionId) {
      x = 0;
    }

    if (y === this.sessionId) {
      y = 0;
    }

    if (elementId) {
      elementId = this.getAutomationId(elementId);
    } else {
      elementId = "";
    }

    let params = {
      elementId,
      x: _lodash.default.toInteger(x),
      y: _lodash.default.toInteger(y)
    };
    return yield this.bootstrap.sendAction("element:click", params);
  });

  return function (_x20) {
    return _ref14.apply(this, arguments);
  };
}();

commands.touchUp = function () {
  var _ref15 = (0, _asyncToGenerator2.default)(function* (x = 1, y = 1, elementId = "") {
    if (elementId && elementId !== this.sessionId) {
      elementId = this.getAutomationId(elementId);
    } else {
      elementId = "";
    }

    let params = {
      elementId,
      x: _lodash.default.toInteger(x),
      y: _lodash.default.toInteger(y)
    };
    return yield this.bootstrap.sendAction("element:touchUp", params);
  });

  return function () {
    return _ref15.apply(this, arguments);
  };
}();

commands.touchDown = function () {
  var _ref16 = (0, _asyncToGenerator2.default)(function* (x, y, elementId = "") {
    if (elementId && elementId !== this.sessionId) {
      elementId = this.getAutomationId(elementId);
    } else {
      elementId = "";
    }

    let params = {
      elementId,
      x: _lodash.default.toInteger(x),
      y: _lodash.default.toInteger(y)
    };
    return yield this.bootstrap.sendAction("element:touchDown", params);
  });

  return function (_x21, _x22) {
    return _ref16.apply(this, arguments);
  };
}();

commands.touchMove = function () {
  var _ref17 = (0, _asyncToGenerator2.default)(function* (xDown, yDown, xUp, yUp, steps = 10, elementId = null) {
    if (elementId && elementId !== this.sessionId) {
      elementId = this.getAutomationId(elementId);
    } else {
      elementId = "";
    }

    let params = {
      elementId,
      xDown: _lodash.default.toInteger(xDown),
      yDown: _lodash.default.toInteger(yDown),
      xUp: _lodash.default.toInteger(xUp),
      yUp: _lodash.default.toInteger(yUp),
      steps: _lodash.default.toInteger(steps)
    };
    return yield this.bootstrap.sendAction("element:touchMove", params);
  });

  return function (_x23, _x24, _x25, _x26) {
    return _ref17.apply(this, arguments);
  };
}();

commands.touchLongClick = function () {
  var _ref18 = (0, _asyncToGenerator2.default)(function* (elementId, x, y, duration) {
    yield this.touchDown(x, y, elementId);
    yield (0, _asyncbox.sleep)(duration);
    return yield this.touchUp(x, y, elementId);
  });

  return function (_x27, _x28, _x29, _x30) {
    return _ref18.apply(this, arguments);
  };
}();

commands.tap = function () {
  var _ref19 = (0, _asyncToGenerator2.default)(function* (elementId, x = 0, y = 0, count = 1) {
    let result = true;
    let tapResult = false;

    for (let i = 0; i < count; i++) {
      tapResult = yield this.click(elementId, x, y);

      if (!tapResult) {
        result = false;
      }
    }

    return result;
  });

  return function (_x31) {
    return _ref19.apply(this, arguments);
  };
}();

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
