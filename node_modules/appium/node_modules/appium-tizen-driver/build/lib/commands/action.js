"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _appiumSupport = require("appium-support");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _jimp = _interopRequireDefault(require("jimp"));

const swipeStepsPerSec = 28;
let commands = {},
    extensions = {};
exports.commands = commands;

commands.flick = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (element, xSpeed, ySpeed, xOffset, yOffset, speed) {
    if (element) {
      return yield this.fakeFlickElement(element, xOffset, yOffset, speed);
    } else {
      return yield this.fakeFlick(xSpeed, ySpeed);
    }
  });

  return function (_x, _x2, _x3, _x4, _x5, _x6) {
    return _ref.apply(this, arguments);
  };
}();

commands.fakeFlick = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (xSpeed, ySpeed) {
    return yield this.bootstrap.sendAction('element:flick', {
      xSpeed,
      ySpeed
    });
  });

  return function (_x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

commands.fakeFlickElement = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (elementId, xoffset, yoffset, speed) {
    let steps = 1250.0 / speed + 1;
    let xStart = 1;
    let yStart = 1;

    if (elementId === this.sessionId) {
      elementId = null;
    }

    if (elementId) {
      let location = yield this.getLocationValueByElementId(elementId);
      xStart = location[0];
      yStart = location[1];
    }

    let xEnd = xStart + xoffset;
    let yEnd = yStart + yoffset;
    let params = [xStart, yStart, xEnd, yEnd, steps];
    return yield this.doSwipe(params);
  });

  return function (_x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
}();

commands.swipe = function () {
  var _ref4 = (0, _asyncToGenerator2.default)(function* (startX, startY, endX, endY, duration) {
    if (startX === 'null') {
      startX = 1;
    }

    if (startY === 'null') {
      startY = 1;
    }

    let swipeOpts = [startX, startY, endX, endY, Math.round(duration * swipeStepsPerSec)];
    return yield this.doSwipe(swipeOpts);
  });

  return function (_x13, _x14, _x15, _x16, _x17) {
    return _ref4.apply(this, arguments);
  };
}();

commands.doSwipe = function () {
  var _ref5 = (0, _asyncToGenerator2.default)(function* (swipeOpts) {
    return yield this.bootstrap.sendAction("element:drag", swipeOpts);
  });

  return function (_x18) {
    return _ref5.apply(this, arguments);
  };
}();

commands.pullFile = function () {
  var _ref6 = (0, _asyncToGenerator2.default)(function* (remotePath) {
    const rootDir = _path.default.resolve(__dirname, '..', '..');

    const filePath = _path.default.resolve(rootDir, 'file');

    let localFile = filePath + '/appiumfile.tmp';
    yield this.sdb.pull(remotePath, localFile);
    let data = yield _appiumSupport.fs.readFile(localFile);
    let b64data = new Buffer(data).toString('base64');

    if (yield _appiumSupport.fs.exists(localFile)) {
      yield _appiumSupport.fs.unlink(localFile);
    }

    return b64data;
  });

  return function (_x19) {
    return _ref6.apply(this, arguments);
  };
}();

function takeScreenShot(_x20) {
  return _takeScreenShot.apply(this, arguments);
}

function _takeScreenShot() {
  _takeScreenShot = (0, _asyncToGenerator2.default)(function* (sdb) {
    return yield sdb.takeScreenShot();
  });
  return _takeScreenShot.apply(this, arguments);
}

function getScreenshotData(_x21) {
  return _getScreenshotData.apply(this, arguments);
}

function _getScreenshotData() {
  _getScreenshotData = (0, _asyncToGenerator2.default)(function* (sdb) {
    const rootDir = _path.default.resolve(__dirname, '..', '..');

    const filePath = _path.default.resolve(rootDir, 'file');

    let localFile = filePath + '/screenShot.tmp';

    if (yield _appiumSupport.fs.exists(localFile)) {
      yield _appiumSupport.fs.unlink(localFile);
    }

    try {
      const pngDir = '/tmp/';

      const png = _path.default.posix.resolve(pngDir, 'dump_screen.png');

      yield sdb.pull(png, localFile);
      return yield _jimp.default.read(localFile);
    } finally {
      if (yield _appiumSupport.fs.exists(localFile)) {
        yield _appiumSupport.fs.unlink(localFile);
      }
    }
  });
  return _getScreenshotData.apply(this, arguments);
}

commands.getScreenshot = (0, _asyncToGenerator2.default)(function* () {
  let result = yield takeScreenShot(this.sdb);

  if (result) {
    let image = yield getScreenshotData(this.sdb);

    const getBuffer = _bluebird.default.promisify(image.getBuffer, {
      context: image
    });

    const imgBuffer = yield getBuffer(_jimp.default.MIME_PNG);
    return imgBuffer.toString('base64');
  } else {
    return null;
  }
});
Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
