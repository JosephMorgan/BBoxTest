"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _logger = _interopRequireDefault(require("../logger"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumBaseDriver = require("appium-base-driver");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
let x = 1,
    y = 1;

commands.doTouchAction = function () {
  var _ref = (0, _asyncToGenerator2.default)(function* (action, opts) {
    switch (action) {
      case 'tap':
        return yield this.tap(opts.element, opts.x, opts.y, opts.count);

      case 'press':
        x = opts.x;
        y = opts.y;
        return yield this.touchDown(opts.x, opts.y, opts.element);

      case 'release':
        if (!opts.x) {
          opts.x = x;
        }

        if (!opts.y) {
          opts.y = y;
        }

        return yield this.touchUp(opts.x, opts.y, opts.element);

      case 'moveTo':
        let result = yield this.touchMove(x, y, opts.x, opts.y, opts.steps, opts.element);
        x = opts.x;
        y = opts.y;
        return result;

      case 'wait':
        return yield _bluebird.default.delay(opts.ms);

      case 'longPress':
        if (typeof opts.duration === 'undefined' || !opts.duration) {
          opts.duration = 2000;
        }

        return yield this.touchLongClick(opts.element, opts.x, opts.y, opts.duration);

      default:
        _logger.default.errorAndThrow(`unknown action ${action}`);

    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

commands.performGesture = function () {
  var _ref2 = (0, _asyncToGenerator2.default)(function* (gesture) {
    try {
      return yield this.doTouchAction(gesture.action, gesture.options || {});
    } catch (e) {
      if ((0, _appiumBaseDriver.isErrorType)(e, _appiumBaseDriver.errors.NoSuchElementError) && gesture.action === 'release' && gesture.options.element) {
        delete gesture.options.element;

        _logger.default.debug(`retrying release without element opts: ${gesture.options}.`);

        return yield this.doTouchAction(gesture.action, gesture.options || {});
      }

      throw e;
    }
  });

  return function (_x3) {
    return _ref2.apply(this, arguments);
  };
}();

commands.performTouch = function () {
  var _ref3 = (0, _asyncToGenerator2.default)(function* (gestures) {
    let result = true;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = gestures[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let g = _step.value;

        if (!(yield this.performGesture(g))) {
          result = false;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return result;
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90b3VjaC5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwieCIsInkiLCJkb1RvdWNoQWN0aW9uIiwiYWN0aW9uIiwib3B0cyIsInRhcCIsImVsZW1lbnQiLCJjb3VudCIsInRvdWNoRG93biIsInRvdWNoVXAiLCJyZXN1bHQiLCJ0b3VjaE1vdmUiLCJzdGVwcyIsIkIiLCJkZWxheSIsIm1zIiwiZHVyYXRpb24iLCJ0b3VjaExvbmdDbGljayIsImxvZyIsImVycm9yQW5kVGhyb3ciLCJwZXJmb3JtR2VzdHVyZSIsImdlc3R1cmUiLCJvcHRpb25zIiwiZSIsImVycm9ycyIsIk5vU3VjaEVsZW1lbnRFcnJvciIsImRlYnVnIiwicGVyZm9ybVRvdWNoIiwiZ2VzdHVyZXMiLCJnIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQUlBLFFBQVEsR0FBRyxFQUFmO0FBQUEsSUFBbUJDLE9BQU8sR0FBRyxFQUE3QjtBQUFBLElBQWlDQyxVQUFVLEdBQUcsRUFBOUM7OztBQUVBLElBQUlDLENBQUMsR0FBRyxDQUFSO0FBQUEsSUFBV0MsQ0FBQyxHQUFHLENBQWY7O0FBRUFKLFFBQVEsQ0FBQ0ssYUFBVDtBQUFBLDZDQUF5QixXQUFnQkMsTUFBaEIsRUFBd0JDLElBQXhCLEVBQThCO0FBQ3JELFlBQVFELE1BQVI7QUFDRSxXQUFLLEtBQUw7QUFDRSxxQkFBYSxLQUFLRSxHQUFMLENBQVNELElBQUksQ0FBQ0UsT0FBZCxFQUF1QkYsSUFBSSxDQUFDSixDQUE1QixFQUErQkksSUFBSSxDQUFDSCxDQUFwQyxFQUF1Q0csSUFBSSxDQUFDRyxLQUE1QyxDQUFiOztBQUNGLFdBQUssT0FBTDtBQUNFUCxRQUFBQSxDQUFDLEdBQUdJLElBQUksQ0FBQ0osQ0FBVDtBQUNBQyxRQUFBQSxDQUFDLEdBQUdHLElBQUksQ0FBQ0gsQ0FBVDtBQUNBLHFC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QixDQUFSLENBQUosRUFBcUM7QUFDbkNuQixVQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNEO0FBQ0Y7QUFQK0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFTaEQsV0FBT0EsTUFBUDtBQUNELEdBVkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBWUFvQixNQUFNLENBQUNDLE1BQVAsQ0FBY2hDLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgZXJyb3JzLCBpc0Vycm9yVHlwZSB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxubGV0IHggPSAxLCB5ID0gMTtcblxuY29tbWFuZHMuZG9Ub3VjaEFjdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIChhY3Rpb24sIG9wdHMpIHtcbiAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICBjYXNlICd0YXAnOlxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudGFwKG9wdHMuZWxlbWVudCwgb3B0cy54LCBvcHRzLnksIG9wdHMuY291bnQpO1xuICAgIGNhc2UgJ3ByZXNzJzpcbiAgICAgIHggPSBvcHRzLng7XG4gICAgICB5ID0gb3B0cy55O1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudG91Y2hEb3duKG9wdHMueCwgb3B0cy55LCBvcHRzLmVsZW1lbnQpO1xuICAgIGNhc2UgJ3JlbGVhc2UnOlxuICAgICAgaWYgKCFvcHRzLngpIHtcbiAgICAgICAgb3B0cy54ID0geDtcclxuICAgICAgfVxuICAgICAgaWYgKCFvcHRzLnkpIHtcbiAgICAgICAgb3B0cy55ID0geTtcclxuICAgICAgfVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMudG91Y2hVcChvcHRzLngsIG9wdHMueSwgb3B0cy5lbGVtZW50KTtcbiAgICBjYXNlICdtb3ZlVG8nOlxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHRoaXMudG91Y2hNb3ZlKHgsIHksIG9wdHMueCwgb3B0cy55LCBvcHRzLnN0ZXBzLCBvcHRzLmVsZW1lbnQpO1xuICAgICAgeCA9IG9wdHMueDtcbiAgICAgIHkgPSBvcHRzLnk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGNhc2UgJ3dhaXQnOlxuICAgICAgcmV0dXJuIGF3YWl0IEIuZGVsYXkob3B0cy5tcyk7XG4gICAgY2FzZSAnbG9uZ1ByZXNzJzpcbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5kdXJhdGlvbiA9PT0gJ3VuZGVmaW5lZCcgfHwgIW9wdHMuZHVyYXRpb24pIHtcbiAgICAgICAgb3B0cy5kdXJhdGlvbiA9IDIwMDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy50b3VjaExvbmdDbGljayhvcHRzLmVsZW1lbnQsIG9wdHMueCwgb3B0cy55LCBvcHRzLmR1cmF0aW9uKTtcbiAgICBkZWZhdWx0OlxuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYHVua25vd24gYWN0aW9uICR7YWN0aW9ufWApO1xuICB9XG59O1xuXG5jb21tYW5kcy5wZXJmb3JtR2VzdHVyZSA9IGFzeW5jIGZ1bmN0aW9uIChnZXN0dXJlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9Ub3VjaEFjdGlvbihnZXN0dXJlLmFjdGlvbiwgZ2VzdHVyZS5vcHRpb25zIHx8IHt9KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHNvbWV0aW1lIHRoZSBlbGVtZW50IGlzIG5vdCBhdmFpbGFibGUgd2hlbiByZWxlYXNpbmcsIHJldHJ5IHdpdGhvdXQgaXRcbiAgICBpZiAoaXNFcnJvclR5cGUoZSwgZXJyb3JzLk5vU3VjaEVsZW1lbnRFcnJvcikgJiYgZ2VzdHVyZS5hY3Rpb24gPT09ICdyZWxlYXNlJyAmJlxuICAgICAgZ2VzdHVyZS5vcHRpb25zLmVsZW1lbnQpIHtcbiAgICAgIGRlbGV0ZSBnZXN0dXJlLm9wdGlvbnMuZWxlbWVudDtcbiAgICAgIGxvZy5kZWJ1ZyhgcmV0cnlpbmcgcmVsZWFzZSB3aXRob3V0IGVsZW1lbnQgb3B0czogJHtnZXN0dXJlLm9wdGlvbnN9LmApO1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9Ub3VjaEFjdGlvbihnZXN0dXJlLmFjdGlvbiwgZ2VzdHVyZS5vcHRpb25zIHx8IHt9KTtcbiAgICB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuY29tbWFuZHMucGVyZm9ybVRvdWNoID0gYXN5bmMgZnVuY3Rpb24gKGdlc3R1cmVzKSB7XG4gIGxldCByZXN1bHQgPSB0cnVlO1xuXG4gIGZvciAobGV0IGcgb2YgZ2VzdHVyZXMpIHtcbiAgICBpZiAoIShhd2FpdCB0aGlzLnBlcmZvcm1HZXN0dXJlKGcpKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9jb21tYW5kcy90b3VjaC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
