{
  "_args": [
    [
      {
        "raw": "@jimp/core@https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
        "scope": "@jimp",
        "escapedName": "@jimp%2fcore",
        "name": "@jimp/core",
        "rawSpec": "https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
        "spec": "https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
        "type": "remote"
      },
      "E:\\1-DB\\eclipse\\workspace\\BBoxTest\\node_modules\\appium\\node_modules\\appium-tizen-driver"
    ]
  ],
  "_from": "@jimp/core@https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
  "_id": "@jimp/core@0.5.4",
  "_inCache": true,
  "_location": "/appium/appium-tizen-driver/@jimp/core",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@jimp/core@https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
    "scope": "@jimp",
    "escapedName": "@jimp%2fcore",
    "name": "@jimp/core",
    "rawSpec": "https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
    "spec": "https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium/appium-tizen-driver",
    "/appium/appium-tizen-driver/@jimp/custom"
  ],
  "_resolved": "https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
  "_shasum": "69d2d9eef1a6a9d62127171e2688cf21bc0ee77c",
  "_shrinkwrap": null,
  "_spec": "@jimp/core@https://registry.npmjs.org/@jimp/core/-/core-0.5.4.tgz",
  "_where": "E:\\1-DB\\eclipse\\workspace\\BBoxTest\\node_modules\\appium\\node_modules\\appium-tizen-driver",
  "author": {
    "name": "Oliver Moran",
    "email": "oliver.moran@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/oliver-moran/jimp/issues"
  },
  "dependencies": {
    "@jimp/utils": "^0.5.0",
    "any-base": "^1.1.0",
    "buffer": "^5.2.0",
    "core-js": "^2.5.7",
    "exif-parser": "^0.1.12",
    "file-type": "^9.0.0",
    "load-bmfont": "^1.3.1",
    "mkdirp": "0.5.1",
    "phin": "^2.9.1",
    "pixelmatch": "^4.0.2",
    "tinycolor2": "^1.4.1"
  },
  "description": "Jimp core",
  "devDependencies": {
    "should": "^13.2.3"
  },
  "files": [
    "dist",
    "es",
    "jimp.d.ts",
    "fonts"
  ],
  "gitHead": "833308a04a490b760425b9caadd6409cb345a582",
  "homepage": "https://github.com/oliver-moran/jimp#readme",
  "license": "MIT",
  "main": "dist/index.js",
  "module": "es/index.js",
  "name": "@jimp/core",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/core</h1>\n</div>\n\nThe main Jimp class. This class can be extended with types and bitmap manipulation functions. Out of the box it does not support any image type.\n\n## Available Methods\n\n### Jimp\n\nThe Jimp class constructor.\n\n### addConstants\n\nAdd constant or static methods to the Jimp constructor.\n\n```js\naddConstants({\n  MIME_SPECIAL: 'image/special'\n});\n```\n\n### addJimpMethods\n\nAdd a bitmap manipulation method to Jimp constructor. These method should return this so that the function can be chain-able.\n\n```js\naddJimpMethods({\n  cropCrazy: function() {\n    // Your custom image manipulation method\n\n    return this;\n  }\n})\n\nconst image = await Jimp.read(...);\n\nimage.resize(10, Jimp.AUTO),\n  .cropCrazy();\n\nawait image.writeAsync('test.png');\n```\n\n### addType\n\nAdd a image mime type to Jimp constructor. First argument is a mime type and the second is an array of file extension for that type.\n\n```js\naddType('image/special', ['spec', 'special']);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/oliver-moran/jimp.git"
  },
  "scripts": {
    "build": "npm run build:node:production && npm run build:module",
    "build:debug": "npm run build:node:debug",
    "build:module": "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
    "build:node": "babel src -d dist --source-maps --config-file ../../babel.config.js",
    "build:node:debug": "cross-env BABEL_ENV=development npm run build:node",
    "build:node:production": "cross-env BABEL_ENV=production npm run build:node",
    "build:watch": "npm run build:node:debug -- -- --watch --verbose",
    "test": "cross-env BABEL_ENV=test mocha --require @babel/register test/**/*.js",
    "test:coverage": "nyc npm run test",
    "test:watch": "npm run test -- --reporter min --watch"
  },
  "version": "0.5.4",
  "xo": false
}
