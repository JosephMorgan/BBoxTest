{
  "_args": [
    [
      {
        "raw": "@jimp/plugin-color@https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
        "scope": "@jimp",
        "escapedName": "@jimp%2fplugin-color",
        "name": "@jimp/plugin-color",
        "rawSpec": "https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
        "spec": "https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
        "type": "remote"
      },
      "E:\\1-DB\\eclipse\\workspace\\BBoxTest\\node_modules\\appium\\node_modules\\appium-tizen-driver"
    ]
  ],
  "_from": "@jimp/plugin-color@https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
  "_id": "@jimp/plugin-color@0.5.5",
  "_inCache": true,
  "_location": "/appium/appium-tizen-driver/@jimp/plugin-color",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@jimp/plugin-color@https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
    "scope": "@jimp",
    "escapedName": "@jimp%2fplugin-color",
    "name": "@jimp/plugin-color",
    "rawSpec": "https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
    "spec": "https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium/appium-tizen-driver",
    "/appium/appium-tizen-driver/@jimp/plugins"
  ],
  "_resolved": "https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
  "_shasum": "68f9652d5065d3380a9967911a7e529325d230d6",
  "_shrinkwrap": null,
  "_spec": "@jimp/plugin-color@https://registry.npmjs.org/@jimp/plugin-color/-/plugin-color-0.5.5.tgz",
  "_where": "E:\\1-DB\\eclipse\\workspace\\BBoxTest\\node_modules\\appium\\node_modules\\appium-tizen-driver",
  "author": "",
  "dependencies": {
    "@jimp/utils": "^0.5.0",
    "core-js": "^2.5.7",
    "tinycolor2": "^1.4.1"
  },
  "description": "Bitmap manipulation to adjust the color in an image.",
  "devDependencies": {
    "@jimp/custom": "^0.5.4",
    "@jimp/test-utils": "^0.5.4",
    "@jimp/types": "^0.5.4"
  },
  "gitHead": "72634d1c6c614a925bf1bc5e861e3640f5c0bf98",
  "license": "MIT",
  "main": "dist/index.js",
  "module": "es/index.js",
  "name": "@jimp/plugin-color",
  "optionalDependencies": {},
  "peerDependencies": {
    "@jimp/custom": ">=0.3.5"
  },
  "publishConfig": {
    "access": "public"
  },
  "readme": "<div align=\"center\">\n  <img width=\"200\" height=\"200\"\n    src=\"https://s3.amazonaws.com/pix.iemoji.com/images/emoji/apple/ios-11/256/crayon.png\">\n  <h1>@jimp/plugin-color</h1>\n  <p>Jimp color methods.</p>\n</div>\n\nBitmap manipulation to adjust the color in an image.\n\n## color\n\nApply multiple color modification rules\n\n- @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ] }\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.color([{ apply: 'red', params: [100] }]);\n}\n\nmain();\n```\n\nJimp supports advanced colour manipulation using a single method as follows:\n\n```js\nimage.color([\n  { apply: 'hue', params: [-90] },\n  { apply: 'lighten', params: [50] },\n  { apply: 'xor', params: ['#06D'] }\n]);\n```\n\nThe method supports the following modifiers:\n\n| Modifier                | Description                                                                                                                                                                                                      |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **lighten** {amount}    | Lighten the color a given amount, from 0 to 100. Providing 100 will always return white (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                         |\n| **brighten** {amount}   | Brighten the color a given amount, from 0 to 100 (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                |\n| **darken** {amount}     | Darken the color a given amount, from 0 to 100. Providing 100 will always return black (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                          |\n| **desaturate** {amount} | Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale (works through [TinyColor](https://github.com/bgrins/TinyColor))                                         |\n| **saturate** {amount}   | Saturate the color a given amount, from 0 to 100 (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                |\n| **greyscale** {amount}  | Completely desaturates a color into greyscale (works through [TinyColor](https://github.com/bgrins/TinyColor))                                                                                                   |\n| **spin** {degree}       | Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing - since it sets the hue back to what it was before. (works through [TinyColor](https://github.com/bgrins/TinyColor)) |\n| **hue** {degree}        | Alias for **spin**                                                                                                                                                                                               |\n| **mix** {color, amount} | Mixes colors by their RGB component values. Amount is opacity of overlaying color                                                                                                                                |\n| **tint** {amount}       | Same as applying **mix** with white color                                                                                                                                                                        |\n| **shade** {amount}      | Same as applying **mix** with black color                                                                                                                                                                        |\n| **xor** {color}         | Treats the two colors as bitfields and applies an XOR operation to the red, green, and blue components                                                                                                           |\n| **red** {amount}        | Modify Red component by a given amount                                                                                                                                                                           |\n| **green** {amount}      | Modify Green component by a given amount                                                                                                                                                                         |\n| **blue** {amount}       | Modify Blue component by a given amount                                                                                                                                                                          |\n\n## brightness\n\nAdjusts the brightness of the image\n\n- @param {number} val the amount to adjust the brightness, a number between -1 and +1\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.brightness(20);\n}\n\nmain();\n```\n\n## contrast\n\nAdjusts the contrast of the image\n\n- @param {number} val the amount to adjust the contrast, a number between -1 and +1\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.contrast(70);\n}\n\nmain();\n```\n\n## posterize\n\nApply a posterize effect\n\n- @param {number} n the amount to adjust the contrast, minimum threshold is two\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.posterize(5);\n}\n\nmain();\n```\n\n## opacity\n\nMultiplies the opacity of each pixel by a factor between 0 and 1\n\n- @param {number} f A number, the factor by which to multiply the opacity of each pixel\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.opacity(80);\n}\n\nmain();\n```\n\n## sepia\n\nApplies a sepia tone to the image\n\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.sepia();\n}\n\nmain();\n```\n\n## fade\n\nFades each pixel by a factor between 0 and 1\n\n- @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.fade(0.7);\n}\n\nmain();\n```\n\n## convolution\n\nSum neighbor pixels weighted by the kernel matrix. You can find a nice explanation with examples at [GIMP's Convolution Matrix plugin](https://docs.gimp.org/2.6/en/plug-in-convmatrix.html)\n\n- @param {array} kernel a matrix to weight the neighbors sum\n- @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  // make me better\n  image.convolution(weights);\n}\n\nmain();\n```\n\n## opaque\n\nSet the alpha channel on every pixel to fully opaque\n\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.opaque();\n}\n\nmain();\n```\n\n## pixelate\n\nPixelates the image or a region\n\n- @param {number} size the size of the pixels\n- @param {number} x (optional) the x position of the region to pixelate\n- @param {number} y (optional) the y position of the region to pixelate\n- @param {number} w (optional) the width of the region to pixelate\n- @param {number} h (optional) the height of the region to pixelate\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  image.pixelate(10);\n}\n\nmain();\n```\n\n## convolute\n\nApplies a convolution kernel to the image or a region\n\n- @param {array} kernel the convolution kernel\n- @param {number} x (optional) the x position of the region to apply convolution to\n- @param {number} y (optional) the y position of the region to apply convolution to\n- @param {number} w (optional) the width of the region to apply convolution to\n- @param {number} h (optional) the height of the region to apply convolution to\n- @param {function(Error, Jimp)} cb (optional) a callback for when complete\n\n```js\nimport jimp from 'jimp';\n\nasync function main() {\n  const image = await jimp.read('test/image.png');\n\n  // make me better\n  image.pixelate(kernal);\n}\n\nmain();\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "build": "npm run build:node:production && npm run build:module",
    "build:debug": "npm run build:node:debug",
    "build:module": "cross-env BABEL_ENV=module babel src -d es --source-maps --config-file ../../babel.config.js",
    "build:node": "babel src -d dist --source-maps --config-file ../../babel.config.js",
    "build:node:debug": "cross-env BABEL_ENV=development npm run build:node",
    "build:node:production": "cross-env BABEL_ENV=production npm run build:node",
    "build:watch": "npm run build:node:debug -- -- --watch --verbose",
    "test": "cross-env BABEL_ENV=test mocha --require @babel/register",
    "test:coverage": "nyc npm run test",
    "test:watch": "npm run test -- --reporter min --watch"
  },
  "version": "0.5.5"
}
